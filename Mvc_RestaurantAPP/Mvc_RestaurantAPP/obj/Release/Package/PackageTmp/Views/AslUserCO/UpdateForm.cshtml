@using Mvc_RestaurantAPP.Models
@model Mvc_RestaurantAPP.Models.AslUserco

@{
    ViewBag.Title = "UpdateDeleteForm";
   
    //Remote validation binding(checking validation)
    Html.EnableClientValidation(false);

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();

    RestaurantDbContext db = new RestaurantDbContext();


    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "AslSuperadmin") && LoggedUserStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }


    List<SelectListItem> listStatus = new List<SelectListItem>();
    listStatus.Add(new SelectListItem { Text = "Active", Value = "A" });
    listStatus.Add(new SelectListItem { Text = "Inactive", Value = "I" });

    List<SelectListItem> listLogInBy = new List<SelectListItem>();
    listLogInBy.Add(new SelectListItem { Text = "Mobile Number", Value = "MOBNO" });
    listLogInBy.Add(new SelectListItem { Text = "Email ADDRESS", Value = "EMAIL" });


    //User ID: [ ] , Login ID Field loaded in DropdownList
    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    List<SelectListItem> aslUsercos = new List<SelectListItem>();
    var result = (from n in db.AslUsercoDbSet
                  where n.COMPID == compid
                  select n).ToList();

    foreach (var n in result)
    {
        AslUserco aslUserco = db.AslUsercoDbSet.FirstOrDefault(e => e.USERID == n.USERID);
        aslUsercos.Add(new SelectListItem { Text = aslUserco.LOGINID, Value = aslUserco.USERID.ToString() });
    }

}

@using (Html.BeginForm("UpdateForm", "AslUserco", FormMethod.Post, new { id = "submitForm" }))
{

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)


    @Html.HiddenFor(model => model.AslUsercoId, new { id = "HiddentxtAslUserCoId" })
    @Html.HiddenFor(model => model.COMPID, new { id = "HiddentxtCompanyID" })

    <div class="container">
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-10">
                <div class="panel panel-info">
                    <div class="panel-heading text-center">
                        <h2>Update User Information</h2>
                    </div>
                </div>
                @if (ViewBag.Message != null)
                {
                    <div class="panel-heading text-center">
                        <h4>@ViewBag.Message</h4>
                    </div>
                }
                
                <div class="jumbotron">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-3">
                                @Html.Label("name", "User Login ID", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.USERID, aslUsercos, "--Select UserName--", new { id = "txtLoginID", @class = "form-control" })
                                @*@Html.ValidationMessageFor(model => model.AslUserco.USERNM, "", new { @class = "text-danger" })*@

                            </div>
                        </div>


                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.USERNM, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.USERNM, htmlAttributes: new { id = "txtuserNameID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.USERNM, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.DEPTNM, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.DEPTNM, htmlAttributes: new { id = "txtDepartmentNameID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.DEPTNM, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.OPTP, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.OPTP, htmlAttributes: new { id = "txtOperationTypeID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OPTP, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.ADDRESS, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.ADDRESS, htmlAttributes: new { id = "txtAddressID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ADDRESS, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.MOBNO, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.MOBNO, htmlAttributes: new { id = "txtMobileID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.MOBNO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.EMAILID, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.EMAILID, htmlAttributes: new { id = "txtEmailID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.EMAILID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.LOGINBY, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.LOGINBY, listLogInBy, "--Select LOGINBY--", htmlAttributes: new { id = "dropdownBoxId", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LOGINBY, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.LOGINID, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.LOGINID, htmlAttributes: new { id = "txtloginID", @class = "form-control", @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.LOGINID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.LOGINPW, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.TextBoxFor(model => model.LOGINPW, htmlAttributes: new { id = "txtpasswordID", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LOGINPW, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.TIMEFR, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                <div class="input-group clockpicker" data-align="top" data-autoclose="true">
                                    @Html.TextBoxFor(model => model.TIMEFR, htmlAttributes: new { id = "txtTimeForID", @class = "form-control", @Value = "00:00" })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.TIMEFR, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.TIMETO, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                <div class="input-group clockpicker" data-align="top" data-autoclose="true">
                                    @Html.TextBoxFor(model => model.TIMETO, htmlAttributes: new { id = "txtTimeToID", @class = "form-control", @Value = "00:00" })
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-time"></span>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.TIMETO, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.LabelFor(model => model.STATUS, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(model => model.STATUS, listStatus, "--Select STATUS--", htmlAttributes: new { id = "ddldropStatusId", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.STATUS, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @Html.HiddenFor(model => model.USERPC)
                        @Html.HiddenFor(model => model.INSTIME)
                        @Html.HiddenFor(model => model.INSIPNO)
                        @Html.HiddenFor(model => model.INSLTUDE)
                        @Html.HiddenFor(model => model.INSUSERID)

                        @Html.TextBoxFor(model => model.UPDLTUDE, new { id = "latlon", style = "display: none;" })
                        <input id="lat" type="hidden" />
                        <input id="lon" type="hidden" />

                        <br />
                        <br />
                        <div class="row">
                            <div class="col-md-3"></div>
                            <div class="col-md-6">
                                <input type="submit" class="btn btn-primary btn-block" name="command" value="Update" />
                               
                            </div>
                        </div>

                        @*<br />
                        <div class="row">
                            <div class="col-md-3">
                                @Html.ActionLink("Back to List", "Index")
                            </div>
                        </div>*@

                    </div>
                </div>

            </div>
            <div class="col-md-1"></div>
        </div>

    </div>


    //datatime picker script
    <script type="text/javascript">
        $('.clockpicker').clockpicker();
    </script>



    //Latitute & longitude
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);
            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
        });


        //passing value from textBox(Mobile Number,Email ID) to another textBox(Login By phoneNo/EmailId?) by selected dropdownList
        $(function () {
            $('#dropdownBoxId').change(function () {
                // gets the value from the drop down box
                var selected = $("#dropdownBoxId option:selected").text();

                var txtMobile = $("#txtMobileID").val();
                var txtEmail = $("#txtEmailID").val();
                // puts the value into the textbox
                var txtBox = document.getElementById('txtloginID');

                if (selected == "Mobile Number") {
                    txtBox.value = txtMobile;
                }
                else if (selected == "Email ADDRESS") {
                    txtBox.value = txtEmail;
                }
            });
        });




        //When login ID dropdown value selected then whole textbox fill loaded from database in specific user Information.
        $(function () {
            //1. Login ID: [    ]Dropdown box
            $('#txtLoginID').change(function () {
                //When the UserName (Dropdown list) changed then get the "User ID" from "ASLUSERCO" table
                var changedDropDown = $('#txtLoginID option:selected').val();

                var hiddentxtAsluserco = document.getElementById('HiddentxtAslUserCoId');
                var hiddentxtCompanyID = document.getElementById('HiddentxtCompanyID');
                var txtuserName = document.getElementById('txtuserNameID');
                var txtdepartmentName = document.getElementById('txtDepartmentNameID');
                var txtOperationType = document.getElementById('txtOperationTypeID');
                var txtAddress = document.getElementById('txtAddressID');
                var txtMobile = document.getElementById('txtMobileID');
                var txtEmail = document.getElementById('txtEmailID');
                var dropdownBox = document.getElementById('dropdownBoxId');
                var txtlogin = document.getElementById('txtloginID');
                var txtpassword = document.getElementById('txtpasswordID');
                var txtTimeFor = document.getElementById('txtTimeForID');
                var txtTimeTo = document.getElementById('txtTimeToID');
                var ddldropStatus = document.getElementById('ddldropStatusId');

                $.getJSON(
                   "/AslUserco/GetUserInformation", { "ChangedDropDown": changedDropDown },
                   function (myData) {
                       hiddentxtAsluserco.value = myData.ASLUSERCOID;
                       hiddentxtCompanyID.value = myData.COMPID;
                       txtuserName.value = myData.USERNAME;
                       txtdepartmentName.value = myData.DEPTNM;
                       txtOperationType.value = myData.OPTP;
                       txtAddress.value = myData.ADDRESS;
                       txtMobile.value = myData.MOBNO;
                       txtEmail.value = myData.EMAILID;
                       dropdownBox.value = myData.LOGINBY;
                       txtlogin.value = myData.LOGINID;
                       txtpassword.value = myData.LOGINPASSWORD;
                       txtTimeFor.value = myData.TIMERFOR;
                       txtTimeTo.value = myData.TIMERTO;
                       ddldropStatus.value = myData.STATUS;

                       document.getElementById("txtuserNameID").focus();
                   });

            });

        });

    </script>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
